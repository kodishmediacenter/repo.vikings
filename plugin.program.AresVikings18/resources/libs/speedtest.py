import base64, codecs
magic = 'aW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc3lzCmltcG9ydCBtYXRoCmltcG9ydCBzaWduYWwKaW1wb3J0IHNvY2tldAppbXBvcnQgdGltZWl0CmltcG9ydCBwbGF0Zm9ybQppbXBvcnQgdGhyZWFkaW5nCmltcG9ydCB1c2VydmFyCmltcG9ydCB4Ym1jCmltcG9ydCB4Ym1jYWRkb24KaW1wb3J0IHhibWNndWkKaW1wb3J0IHhibWNwbHVnaW4KaW1wb3J0IG9zCmltcG9ydCBzeXMKCkFERE9OVElUTEUgPSB1c2VydmFyLkFERE9OVElUTEUKQ09MT1IxID0gdXNlcnZhci5DT0xPUjEKQ09MT1IyID0gdXNlcnZhci5DT0xPUjIKX192ZXJzaW9uX18gPSAnMC4zLjUnCnVzZXJfYWdlbnQgPSBOb25lCnNvdXJjZSA9IE5vbmUKc2h1dGRvd25fZXZlbnQgPSBOb25lCnNjaGVtZSA9ICdodHRwJwpzb2NrZXRfc29ja2V0ID0gc29ja2V0LnNvY2tldAoKdHJ5OgogICAgaW1wb3J0IHhtbC5ldHJlZS5jRWxlbWVudFRyZWUgYXMgRVQKZXhjZXB0IEltcG9ydEVycm9yOgogICAgdHJ5OgogICAgICAgIGltcG9ydCB4bWwuZXRyZWUuRWxlbWVudFRyZWUgYXMgRVQKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBmcm9tIHhtbC5kb20gaW1wb3J0IG1pbmlkb20gYXMgRE9NCiAgICAgICAgRVQgPSBOb25lCnRyeToKICAgIGltcG9ydCB4bWwuZXRyZWUuY0VsZW1lbnRUcmVlIGFzIEVUCiAgICBmcm9tIHhtbC5kb20gaW1wb3J0IG1pbmlkb20gYXMgRE9NCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHRyeToKICAgICAgICBpbXBvcnQgeG1sLmV0cmVlLkVsZW1lbnRUcmVlIGFzIEVUCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgZnJvbSB4bWwuZG9tIGltcG9ydCBtaW5pZG9tIGFzIERPTQogICAgICAgIEVUID0gTm9uZQp0cnk6CiAgICBmcm9tIHVybGxpYjIgaW1wb3J0IHVybG9wZW4sIFJlcXVlc3QsIEhUVFBFcnJvciwgVVJMRXJyb3IKZXhjZXB0IEltcG9ydEVycm9yOgogICAgZnJvbSB1cmxsaWIucmVxdWVzdCBpbXBvcnQgdXJsb3BlbiwgUmVxdWVzdCwgSFRUUEVycm9yLCBVUkxFcnJvcgoKdHJ5OgogICAgZnJvbSBodHRwbGliIGltcG9ydCBIVFRQQ29ubmVjdGlvbiwgSFRUUFNDb25uZWN0aW9uCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGVfaHR0cF9weTIgPSBzeXMuZXhjX2luZm8oKQogICAgdHJ5OgogICAgICAgIGZyb20gaHR0cC5jbGllbnQgaW1wb3J0IEhUVFBDb25uZWN0aW9uLCBIVFRQU0Nvbm5lY3Rpb24KICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBlX2h0dHBfcHkzID0gc3lzLmV4Y19pbmZvKCkKICAgICAgICByYWlzZSBTeXN0ZW1FeGl0KCcnJ1lvdXIgcHl0aG9uIGluc3RhbGxhdGlvbiBpcyBtaXNzaW5nIHJlcXVpcmVkIEhUVFAgY2xpZW50IGNsYXNzZXM6CgpQeXRob24gMjogJXMKUHl0aG9uIDM6ICVzJycnCiAgICAgICAgICAgICAgICAgICAgICAgICAlIChlX2h0dHBfcHkyWzFdLCBlX2h0dHBfcHkzWzFdKSkKCnRyeToKICAgIGZyb20gUXVldWUgaW1wb3J0IFF1ZXVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGZyb20gcXVldWUgaW1wb3J0IFF1ZXVlCgp0cnk6CiAgICBmcm9tIHVybHBhcnNlIGltcG9ydCB1cmxwYXJzZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgdXJscGFyc2UKCnRyeToKICAgIGZyb20gdXJscGFyc2UgaW1wb3J0IHBhcnNlX3FzCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHRyeToKICAgICAgICBmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgcGFyc2VfcXMKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBmcm9tIGNnaSBpbXBvcnQgcGFyc2VfcXMKCnRyeToKICAgIGZyb20gaGFzaGxpYiBpbXBvcnQgbWQ1CmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGZyb20gbWQ1IGltcG9ydCBtZDUKCnRyeToKICAgIGZyb20gYXJncGFyc2UgaW1wb3J0IEFyZ3VtZW50UGFyc2VyIGFzIEFyZ1BhcnNlcgpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBmcm9tIG9wdHBhcnNlIGltcG9ydCBPcHRpb25QYXJzZXIgYXMgQXJnUGFyc2VyCgp0cnk6CiAgICBpbXBvcnQgYnVpbHRpbnMKZXhjZXB0IEltcG9ydEVycm9yOgoKCiAgICBkZWYgcHJpbnRfKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgZnAgPSBrd2FyZ3MucG9wKCdmaWxlJywgc3lzLnN0ZG91dCkKICAgICAgICBpZiBmcCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgZGVmIHdyaXRlKGRhdGEpOgogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShkYXRhLCBiYXNlc3RyaW5nKToKICAgICAgICAgICAgICAgIGRhdGEgPSBzdHIoZGF0YSkKICAgICAgICAgICAgZnAud3JpdGUoZGF0YSkKCiAgICAgICAgd2FudF91bmljb2RlID0gRmFsc2UKICAgICAgICBzZXAgPSBrd2FyZ3MucG9wKCdzZXAnLCBOb25lKQogICAgICAgIGlmIHNlcCBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzZXAsIHVuaWNvZGUpOgogICAgICAgICAgICAgICAgd2FudF91bmljb2RlID0gVHJ1ZQogICAgICAgICAgICBlbGlmIG5vdCBpc2luc3RhbmNlKHNlcCwgc3RyKToKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcignc2VwIG11c3QgYmUgTm9uZSBvciBhIHN0cmluZycpCiAgICAgICAgZW5kID0ga3dhcmdzLnBvcCgnZW5kJywgTm9uZSkKICAgICAgICBpZiBlbmQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZW5kLCB1bmljb2RlKToKICAgICAgICAgICAgICAgIHdhbnRfdW5pY29kZSA9IFRydWUKICAgICAgICAgICAgZWxpZiBub3QgaXNpbnN0YW5jZShlbmQsIHN0cik6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ2VuZCBtdXN0IGJlIE5vbmUgb3IgYSBzdHJpbmcnKQogICAgICAgIGlmIGt3YXJnczoKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdpbnZhbGlkIGtleXdvcmQgYXJndW1lbnRzIHRvIHByaW50KCknKQogICAgICAgIGlmIG5vdCB3YW50X3VuaWNvZGU6CiAgICAgICAgICAgIGZvciBhcmcgaW4gYXJnczoKICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoYXJnLCB1bmljb2RlKToKICAgICAgICAgICAgICAgICAgICB3YW50X3VuaWNvZGUgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBpZiB3YW50X3VuaWNvZGU6CiAgICAgICAgICAgIG5ld2xpbmUgPSB1bmljb2RlKCdcbicpCiAgICAgICAgICAgIHNwYWNlID0gdW5pY29kZSgnICcpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbmV3bGluZSA9ICdcbicKICAgICAgICAgICAgc3BhY2UgPSAnICcKICAgICAgICBpZiBzZXAgaXMgTm9uZToKICAgICAgICAgICAgc2VwID0gc3BhY2UKICAgICAgICBpZiBlbmQgaXMgTm9uZToKICAgICAgICAgICAgZW5kID0gbmV3bGluZQogICAgICAgIGZvciAoaSwgYXJnKSBpbiBlbnVtZXJhdGUoYXJncyk6CiAgICAgICAgICAgIGlmIGk6CiAgICAgICAgICAgICAgICB3cml0ZShzZXApCiAgICAgICAgICAgIHdyaXRlKGFyZykKICAgICAgICB3cml0ZShlbmQpCmVsc2U6CiAgICBwcmludF8gPSBnZXRhdHRyKGJ1aWx0aW5zLCAncHJpbnQnKQogICAgZGVsIGJ1aWx0aW5zCmNsYXNzIFNwZWVkdGVzdENsaVNlcnZlckxpc3RFcnJvcihFeGNlcHRpb24pOgogICAgIiIiCiIiIgpkZWYgYm91bmRfc29ja2V0KCphcmdzLCAqKmt3YXJncyk6CgogICAgZ2xvYmFsIHNvdXJjZQogICAgc29jayA9IHNvY2tldF9zb2NrZXQoKmFyZ3MsICoqa3dhcmdzKQogICAgc29jay5iaW5kKChzb3VyY2UsIDApKQogICAgcmV0dXJuIHNvY2sKZGVmIGRpc3RhbmNlKG9yaWdpbiwgZGVzdGluYXRpb24pOgogICAgKGxhdDEsIGxvbjEpID0gb3JpZ2luCiAgICAobGF0MiwgbG9uMikgPSBkZXN0aW5hdGlvbgogICAgcmFkaXVzID0gNjM3MSAgIyBrbQoKICAgIGRsYXQgPSBtYXRoLnJhZGlhbnMobGF0MiAtIGxhdDEpCiAgICBkbG9uID0gbWF0aC5yYWRpYW5zKGxvbjIgLSBsb24xKQogICAgYSA9IG1hdGguc2luKGRsYXQgLyAyKSAqIG1hdGguc2luKGRsYXQgLyAyKSBcCiAgICAgICAgKyBtYXRoLmNvcyhtYXRoLnJhZGlhbnMobGF0MSkpICogbWF0aC5jb3MobWF0aC5yYWRpYW5zKGxhdDIpKSBcCiAgICAgICAgKiBtYXRoLnNpbihkbG9uIC8gMikgKiBtYXRoLnNpbihkbG9uIC8gMikKICAgIGMgPSAyICogbWF0aC5hdGFuMihtYXRoLnNxcnQoYSksIG1hdGguc3FydCgxIC0gYSkpCiAgICBkID0gcmFkaXVzICogYwoKICAgIHJldHVybiBkCmRlZiBidWlsZF91c2VyX2FnZW50KCk6CiAgICBnbG9iYWwgdXNlcl9hZ2VudAogICAgaWYgdXNlcl9hZ2VudDoKICAgICAgICByZXR1cm4gdXNlcl9hZ2VudAogICAgdWFfdHVwbGUgPSAoJ01vemlsbGEvNS4wJywgJyglczsgVTsgJXM7IGVuLXVzKScKICAgICAgICAgICAgICAgICUgKHBsYXRmb3JtLnN5c3RlbSgpLCBwbGF0Zm9ybS5hcmNoaXRlY3R1cmUoKVswXSksCiAgICAgICAgICAgICAgICAnUHl0aG9uLyVzJyAlIHBsYXRmb3JtLnB5dGhvbl92ZXJzaW9uKCksCiAgICAgICAgICAgICAgICAnKEtIVE1MLCBsaWtlIEdlY2tvKScsICdzcGVlZHRlc3QtY2xpLyVzJyAlIF9fdmVyc2lvbl9fKQogICAgdXNlcl9hZ2VudCA9ICcgJy5qb2luKHVhX3R1cGxlKQogICAgcmV0dXJuIHVzZXJfYWdlbnQKZGVmIGJ1aWxkX3JlcXVlc3QodXJsLCBkYXRhPU5vbmUsIGhlYWRlcnM9e30pOgogICAgaWYgdXJsWzBdID09ICc6JzoKICAgICAgICBzY2hlbWVkX3VybCA9ICclcyVzJyAlIChzY2hlbWUsIHVybCkKICAgIGVsc2U6CiAgICAgICAgc2NoZW1lZF91cmwgPSB1cmwKICAgIGhlYWRlcnNbJ1VzZXItQWdlbnQnXSA9IHVzZXJfYWdlbnQKICAgIHJldHVybiBSZXF1ZXN0KHNjaGVtZWRfdXJsLCBkYXRhPWRhdGEsIGhlYWRlcnM9aGVhZGVycykKZGVmIGNhdGNoX3JlcXVlc3QocmVxdWVzdCk6CiAgICB0cnk6CiAgICAgICAgdWggPSB1cmxvcGVuKHJlcXVlc3QpCiAgICAgICAgcmV0dXJuIHVoCiAgICBleGNlcHQgKEhUVFBFcnJvciwgVVJMRXJyb3IsIHNvY2tldC5lcnJvcik6CiAgICAgICAgZSA9IHN5cy5leGNfaW5mbygpWzFdCiAgICAgICAgcmV0dXJuIChOb25lLCBlKQpjbGFzcyBGaWxlR2V0dGVyKHRocmVhZGluZy5UaHJlYWQpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmL'
love = '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'
god = 'B9CiAgICBleGNlcHQgU3ludGF4RXJyb3I6CiAgICAgICAgcHJpbnRfKCdGYWlsZWQgdG8gcGFyc2Ugc3BlZWR0ZXN0Lm5ldCBjb25maWd1cmF0aW9uJykKICAgICAgICBzeXMuZXhpdCgxKQogICAgZGVsIHJvb3QKICAgIGRlbCBjb25maWd4bWwKICAgIHJldHVybiBjb25maWcKZGVmIGNsb3Nlc3RTZXJ2ZXJzKGNsaWVudCwgYWxsPUZhbHNlKToKICAgIHVybHMgPSBbJ2h0dHA6Ly93d3cuc3BlZWR0ZXN0Lm5ldC9zcGVlZHRlc3Qtc2VydmVycy1zdGF0aWMucGhwJywKICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LnNwZWVkdGVzdC5uZXQvc3BlZWR0ZXN0LXNlcnZlcnMtc3RhdGljLnBocCddCiAgICBlcnJvcnMgPSBbXQogICAgc2VydmVycyA9IHt9CiAgICBmb3IgdXJsIGluIHVybHM6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXF1ZXN0ID0gYnVpbGRfcmVxdWVzdCh1cmwpCiAgICAgICAgICAgIHVoID0gY2F0Y2hfcmVxdWVzdChyZXF1ZXN0KQogICAgICAgICAgICBpZiB1aCBpcyBGYWxzZToKICAgICAgICAgICAgICAgIGVycm9ycy5hcHBlbmQoJyVzJyAlIGUpCiAgICAgICAgICAgICAgICByYWlzZSBTcGVlZHRlc3RDbGlTZXJ2ZXJMaXN0RXJyb3IKICAgICAgICAgICAgc2VydmVyc3htbCA9IFtdCiAgICAgICAgICAgIHdoaWxlIDE6CiAgICAgICAgICAgICAgICBzZXJ2ZXJzeG1sLmFwcGVuZCh1aC5yZWFkKDEwMjQwKSkKICAgICAgICAgICAgICAgIGlmIGxlbihzZXJ2ZXJzeG1sWy0xXSkgPT0gMDoKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBpZiBpbnQodWguY29kZSkgIT0gMjAwOgogICAgICAgICAgICAgICAgdWguY2xvc2UoKQogICAgICAgICAgICAgICAgcmFpc2UgU3BlZWR0ZXN0Q2xpU2VydmVyTGlzdEVycm9yCiAgICAgICAgICAgIHVoLmNsb3NlKCkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHJvb3QgPSBFVC5mcm9tc3RyaW5nKCcnLmVuY29kZSgpLmpvaW4oc2VydmVyc3htbCkpCiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMgPSByb290LmdldGl0ZXJhdG9yKCdzZXJ2ZXInKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBQeXRob24zIGJyYW5jaAoKICAgICAgICAgICAgICAgICAgICByb290ID0gRE9NLnBhcnNlU3RyaW5nKCcnLmpvaW4oc2VydmVyc3htbCkpCiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMgPSByb290LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzZXJ2ZXInKQogICAgICAgICAgICBleGNlcHQgU3ludGF4RXJyb3I6CiAgICAgICAgICAgICAgICByYWlzZSBTcGVlZHRlc3RDbGlTZXJ2ZXJMaXN0RXJyb3IKICAgICAgICAgICAgZm9yIHNlcnZlciBpbiBlbGVtZW50czoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBhdHRyaWIgPSBzZXJ2ZXIuYXR0cmliCiAgICAgICAgICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgYXR0cmliID0gZGljdChsaXN0KHNlcnZlci5hdHRyaWJ1dGVzLml0ZW1zKCkpKQogICAgICAgICAgICAgICAgZCA9IGRpc3RhbmNlKFtmbG9hdChjbGllbnRbJ2xhdCddKSwgZmxvYXQoY2xpZW50Wydsb24nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSldLCBbZmxvYXQoYXR0cmliLmdldCgnbGF0JykpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0KGF0dHJpYi5nZXQoJ2xvbicpKV0pCiAgICAgICAgICAgICAgICBhdHRyaWJbJ2QnXSA9IGQKICAgICAgICAgICAgICAgIGlmIGQgbm90IGluIHNlcnZlcnM6CiAgICAgICAgICAgICAgICAgICAgc2VydmVyc1tkXSA9IFthdHRyaWJdCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlcnZlcnNbZF0uYXBwZW5kKGF0dHJpYikKICAgICAgICAgICAgZGVsIHJvb3QKICAgICAgICAgICAgZGVsIHNlcnZlcnN4bWwKICAgICAgICAgICAgZGVsIGVsZW1lbnRzCiAgICAgICAgZXhjZXB0IFNwZWVkdGVzdENsaVNlcnZlckxpc3RFcnJvcjoKICAgICAgICAgICAgY29udGludWUKICAgICAgICBpZiBzZXJ2ZXJzOgogICAgICAgICAgICBicmVhawogICAgaWYgbm90IHNlcnZlcnM6CiAgICAgICAgcHJpbnRfKCcnJ0ZhaWxlZCB0byByZXRyaWV2ZSBsaXN0IG9mIHNwZWVkdGVzdC5uZXQgc2VydmVyczoKICVzJycnCiAgICAgICAgICAgICAgICUgJ1xuJy5qb2luKGVycm9ycykpCiAgICAgICAgc3lzLmV4aXQoMSkKICAgIGNsb3Nlc3QgPSBbXQogICAgZm9yIGQgaW4gc29ydGVkKHNlcnZlcnMua2V5cygpKToKICAgICAgICBmb3IgcyBpbiBzZXJ2ZXJzW2RdOgogICAgICAgICAgICBjbG9zZXN0LmFwcGVuZChzKQogICAgICAgICAgICBpZiBsZW4oY2xvc2VzdCkgPT0gNSBhbmQgbm90IGFsbDoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZWxzZToKICAgICAgICAgICAgY29udGludWUKICAgICAgICBicmVhawogICAgZGVsIHNlcnZlcnMKICAgIHJldHVybiBjbG9zZXN0CmRlZiBnZXRCZXN0U2VydmVyKHNlcnZlcnMpOgogICAgcmVzdWx0cyA9IHt9CiAgICBmb3Igc2VydmVyIGluIHNlcnZlcnM6CiAgICAgICAgY3VtID0gW10KICAgICAgICB1cmwgPSAnJXMvbGF0ZW5jeS50eHQnICUgb3MucGF0aC5kaXJuYW1lKHNlcnZlclsndXJsJ10pCiAgICAgICAgdXJscGFydHMgPSB1cmxwYXJzZSh1cmwpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCwgMyk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIHVybHBhcnRzWzBdID09ICdodHRwcyc6CiAgICAgICAgICAgICAgICAgICAgaCA9IEhUVFBTQ29ubmVjdGlvbih1cmxwYXJ0c1sxXSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgaCA9IEhUVFBDb25uZWN0aW9uKHVybHBhcnRzWzFdKQogICAgICAgICAgICAgICAgaGVhZGVycyA9IHsnVXNlci1BZ2VudCc6IHVzZXJfYWdlbnR9CiAgICAgICAgICAgICAgICBzdGFydCA9IHRpbWVpdC5kZWZhdWx0X3RpbWVyKCkKICAgICAgICAgICAgICAgIGgucmVxdWVzdCgnR0VUJywgdXJscGFydHNbMl0sIGhlYWRlcnM9aGVhZGVycykKICAgICAgICAgICAgICAgIHIgPSBoLmdldHJlc3BvbnNlKCkKICAgICAgICAgICAgICAgIHRvdGFsID0gdGltZWl0LmRlZmF1bHRfdGltZXIoKSAtIHN0YXJ0CiAgICAgICAgICAgIGV4Y2VwdCAoSFRUUEVycm9yLCBVUkxFcnJvciwgc29ja2V0LmVycm9yKToKICAgICAgICAgICAgICAgIGN1bS5hcHBlbmQoMzYwMCkKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIHRleHQgPSByLnJlYWQoOSkKICAgICAgICAgICAgaWYgaW50KHIuc3RhdHVzKSA9PSAyMDAgYW5kIHRleHQgPT0gJ3Rlc3Q9dGVzdCcuZW5jb2RlKCk6CiAgICAgICAgICAgICAgICBjdW0uYXBwZW5kKHRvdGFsKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY3VtLmFwcGVuZCgzNjAwKQogICAgICAgICAgICBoLmNsb3NlKCkKICAgICAgICBhdmcgPSByb3VuZChzdW0oY3VtKSAvIDYgKiAxMDAwLCAzKQogICAgICAgIHJlc3VsdHNbYXZnXSA9IHNlcnZlcgogICAgZmFzdGVzdCA9IHNvcnRlZChyZXN1bHRzLmtleXMoKSlbMF0KICAgIGJlc3QgPSByZXN1bHRzW2Zhc3Rlc3RdCiAgICBiZXN0WydsYXRlbmN5J10gPSBmYXN0ZXN0CiAgICByZXR1cm4gYmVzdApkZWYgY3RybF9jKHNpZ251bSwgZnJhbWUpOgogICAgZ2xvYmFsIHNodXRkb3duX2V2ZW50CiAgICBzaHV0ZG93bl9ldmVudC5zZXQoKQogICAgcmFpc2UgU3lzdGVtRXhpdCgnXG5DYW5jZWxsaW5nLi4uJykKZGVmIHZlcnNpb24oKToKICAgIHJhaXNlIFN5c3RlbUV4aXQoX192ZXJzaW9uX18pCmRlZiBzcGVlZHRlc3QoCiAgICBsaXN0PUZhbHNlLAogICAgbWluaT1Ob25lLAogICAgc2VydmVyPU5vbmUsCiAgICBzaGFyZT1UcnVlLAogICAgc2ltcGxlPUZhbHNlLAogICAgc3JjPU5vbmUsCiAgICB0aW1lb3V0PTEwLAogICAgdW5pdHM9KCdiaXQnLCA4KSwKICAgIHZlcnNpb249RmFsc2UsCiAgICApOgogICAgZ2xvYmFsIHNodXRkb3duX2V2ZW50LCBzb3VyY2UsIHNjaGVtZQogICAgc2h1dGRvd25fZXZlbnQgPSB0aHJlYWRpbmcuRXZlbnQoKQogICAgZ2xvYmFsIGxpbmUxLCBsaW5lMiwgbGluZTMKCiAgICBkcCA9IHhibWNndWkuRGlhbG9nUHJvZ3Jlc3MoKQogICAgbGluZTEgPSAnW0NPTE9SICVzXUluaWNpYW5kbyBvIFRlc3RlLi4gUG9yIGZhdm9yIGFndWFyZGUhIVsvQ09MT1JdJyAlIENPTE9SMgogICAgZHAuY3JlYXRlKCclczogW0NPTE9SICVzXVNwZWVkIFRlc3RbL0NPTE9SXScgJSAoQURET05USVRMRSwKICAgICAgICAgICAgICBDT0xPUjEpLCBsaW5lMSkKICAgIGRwLnVwZGF0ZSgwKQogICAgYnVpbGRfdXNlcl9hZ2VudCgpCiAgICBwcmludF8oJ1JlY3VwZXJhbmRvIGEgY29uZmlndXJhY2FvIGRvIFNwZWVkVGVzdC4uLicpCiAgICBsaW5lMiA9IFwKICAgICAgICAnW0NPTE9SICVzXVJlY3VwZXJhbmRvIGEgY29uZmlndXJhY2FvIGRvIFNwZWVkVGVzdC4uLlsvQ09MT1JdJyBcCiAgICAgICAgJSBDT0xPUjIKICAgIGRwLnVwZGF0ZSgyLCBsaW5lMSwgbGluZTIpCiAgICB0cnk6CiAgICAgICAgY29uZmlnID0gZ2V0Q29uZmlnKCkKICAgIGV4Y2VwdCBVUkxFcnJvcjoKICAgICAgICBwcmludF8oJ05hbyBlIHBvc3NpdmVsIHJlY3VwZXJhciBhIGNvbmZpZ3VyYWNhbyBkbyBTcGVlZFRlc3QnKQogICAgICAgIHN5cy5leGl0KDEpCgogICAgcHJpbnRfKCdSZWN1cGVyYW5kbyBhIGxpc3RhIGRlIHNlcnZpZG9yZXMgZG8gU3BlZWRUZXN0Li4uJykKICAgIGxpbmUzID0gJ1tDT0xPUiAlc11SZWN1cGVyYW5kbyBhIGxpc3RhIGRlIHNlcnZpZG9yZXMgZG8gU3BlZWRUZXN0Li4uWy9DT0xPUl0nIFwKICAgICAgICAlIENPTE9SMgogICAgZHAudXBkYXRlKDQsIGxpbmUxLCBsaW5lMiwgbGluZTMpCgogICAgc2VydmVycyA9IGNsb3Nlc3RTZXJ2ZXJzKGNvbmZpZ1snY2xpZW50J10pCgogICAgcHJpbnRfKCdUZXN0YW5kbyBhIHBhcnRpciBkZSAlKGlzcClzICglKGlwKXMpLi4uJyAlIGNvbmZpZ1snY2xpZW50J10pCiAgICB'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))